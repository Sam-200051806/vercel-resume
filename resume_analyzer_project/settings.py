"""
Django settings for resume_analyzer_project project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
import environ

# Initialize environment variables
env = environ.Env()
# Explicitly set the path to the .env file
env_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '.env')
print(f"Loading environment from: {env_file}")
environ.Env.read_env(env_file)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-h%-_kt+bwop2ac!=sdl!tcr*xmb%f&0vhq$7ary2u$kqeq$j5-')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)

# Get ALLOWED_HOSTS from environment variable or use default
allowed_hosts_env = os.environ.get('ALLOWED_HOSTS', '')
if allowed_hosts_env:
    # If environment variable is set, use it (comma-separated list)
    ALLOWED_HOSTS = allowed_hosts_env.split(',')
else:
    # Otherwise use default list
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.vercel.app', '.now.sh', '.onrender.com', 'vercel-resume.onrender.com']

# Print for debugging
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")

# Pinecone settings
PINECONE_API_KEY = env('PINECONE_API_KEY', default='')
INDEX_NAME = env('INDEX_NAME', default='')
GROQ_API_KEY = env('GROQ_API_KEY', default='')

# Database URL for Supabase PostgreSQL connection
DATABASE_URL = env('DATABASE_URL', default='')
print(f"DATABASE_URL is {'set' if DATABASE_URL else 'NOT set'}")
if DATABASE_URL:
    # Print a sanitized version of the URL (hiding password)
    try:
        # Handle the case where the password might contain @ characters
        url_parts = DATABASE_URL.split('@')
        if len(url_parts) > 2:  # Password contains @ characters
            credentials = '@'.join(url_parts[:-1])
            host_part = url_parts[-1]
        else:
            credentials = url_parts[0]
            host_part = url_parts[1]

        # Split credentials into user and password
        user_pass = credentials.split('://')[-1].split(':')
        if len(user_pass) > 1:
            user = user_pass[0]
            # Replace password with *****
            sanitized_url = f"{DATABASE_URL.split('://')[0]}://{user}:*****@{host_part}"
            print(f"Sanitized DATABASE_URL: {sanitized_url}")
        else:
            print("DATABASE_URL format not recognized, unable to sanitize")
    except Exception as e:
        print(f"Error sanitizing DATABASE_URL: {str(e)}")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Custom apps
    'resume_analyzer_project.core',
    'resume_analyzer_project.resume_analyzer',
]

# Add sslserver only in local development, not in production
if DEBUG and not os.environ.get('RENDER'):
    INSTALLED_APPS += ['sslserver']

# Disable migrations only during the build process
if os.environ.get('VERCEL_BUILD'):
    MIGRATION_MODULES = {app.split('.')[-1]: None for app in INSTALLED_APPS}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# WhiteNoise configuration
WHITENOISE_USE_FINDERS = True  # Use Django's staticfiles finders to locate files
WHITENOISE_ROOT = os.path.join(BASE_DIR, 'static')

ROOT_URLCONF = 'resume_analyzer_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'resume_analyzer_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Database configuration
# Get database connection parameters from environment variables
db_name = env('DB_NAME', default='resumedb')  # Use resumedb for local development
db_user = env('DB_USER', default='postgres')
db_password = env('DB_PASSWORD', default='sambhav')  # Local password
db_host = env('DB_HOST', default='localhost')  # Use localhost for local development
db_port = env('DB_PORT', default='5432')

# Check if we're using DATABASE_URL for Supabase
if DATABASE_URL:
    print(f"DATABASE_URL is set, will use Supabase PostgreSQL")
    # Parse the DATABASE_URL to get the host for logging
    try:
        # Handle the case where the password might contain @ characters
        url_parts = DATABASE_URL.split('@')
        if len(url_parts) > 2:  # Password contains @ characters
            credentials = '@'.join(url_parts[:-1])
            host_part = url_parts[-1]
        else:
            credentials = url_parts[0]
            host_part = url_parts[1]

        db_host_from_url = host_part.split(':')[0]
        db_name_from_url = DATABASE_URL.split('/')[-1]
        print(f"Supabase host from URL: {db_host_from_url}")
        print(f"Database name from URL: {db_name_from_url}")
    except Exception as e:
        print(f"Error parsing DATABASE_URL: {str(e)}")
else:
    # Determine if we're using Supabase or local database from DB_HOST
    is_supabase = db_host and 'supabase.co' in db_host

    # Log database connection info for debugging (without password)
    if is_supabase:
        print(f"Connecting to Supabase database: '{db_name}'")
    else:
        print(f"Connecting to local database: '{db_name}'")
    print(f"Database host: {db_host}")
    print(f"Database user: {db_user}")

# Configure the database - ONLY use Supabase PostgreSQL via DATABASE_URL
import dj_database_url
import os

# Always use DATABASE_URL for all environments
print("Using Supabase PostgreSQL via DATABASE_URL for all environments")

# For Render deployment, use a modified approach to avoid IPv6 issues
if os.environ.get('RENDER'):
    print("Using modified connection approach for Render")

    # Parse the DATABASE_URL manually to extract components
    import urllib.parse
    db_url = os.environ.get('DATABASE_URL', '')

    if db_url:
        # Parse the URL to get components
        parsed_url = urllib.parse.urlparse(db_url)

        # Extract username and password from netloc
        userpass, hostport = parsed_url.netloc.split('@', 1)
        username, password = userpass.split(':', 1)

        # URL decode the password (handle special characters)
        password = urllib.parse.unquote(password)

        # Extract host and port
        if ':' in hostport:
            host, port = hostport.split(':', 1)
        else:
            host = hostport
            port = '5432'  # Default PostgreSQL port

        # Try to resolve hostname to IPv4 if it's a domain
        if not host.startswith('[') and not all(c.isdigit() or c == '.' for c in host):
            try:
                import socket
                print(f"Attempting to resolve {host} to IPv4 address...")
                # Get all addresses, filter for IPv4
                addrinfo = socket.getaddrinfo(host, port, socket.AF_INET, socket.SOCK_STREAM)
                if addrinfo:
                    ipv4_addr = addrinfo[0][4][0]  # First IPv4 address
                    print(f"Resolved {host} to IPv4 address: {ipv4_addr}")
                    host = ipv4_addr
            except Exception as e:
                print(f"Failed to resolve {host} to IPv4: {str(e)}")

        # Extract database name from path
        path = parsed_url.path
        if path.startswith('/'):
            path = path[1:]

        # Set up direct connection parameters
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': path,
                'USER': username,
                'PASSWORD': password,
                'HOST': host,
                'PORT': port,
                'OPTIONS': {
                    'sslmode': 'require',
                    'target_session_attrs': 'read-write',
                },
            }
        }

        print(f"Configured direct database connection to host: {host}, database: {path}")
    else:
        # Fallback to default configuration
        DATABASES = {
            'default': dj_database_url.config(
                default=DATABASE_URL,
                conn_max_age=600,
                conn_health_checks=True,
                ssl_require=True,
            )
        }
else:
    # Local development - use DATABASE_URL
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
            ssl_require=True,
        )
    }

# Add database router for Vercel build if needed
if os.environ.get('VERCEL_BUILD'):
    DATABASE_ROUTERS = ['resume_analyzer_project.db_router.NoDBRouter']
elif os.environ.get('RENDER'):
    # For Render deployment
    print(f"RENDER environment detected")

    # DATABASE_URL is already handled in the main database configuration above
    # This section is only for Render-specific logging

    # Print all environment variables for debugging (excluding sensitive values)
    for key, value in os.environ.items():
        if 'SECRET' not in key.upper() and 'PASSWORD' not in key.upper() and 'KEY' not in key.upper():
            print(f"Environment variable: {key}={value}")
        else:
            print(f"Environment variable: {key}=*****")
else:
    # Local development - DATABASE_URL is already handled in the main configuration
    print("Local development environment detected")


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Media files (Uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# WhiteNoise configuration for production
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    # Add Render-specific settings
    if os.environ.get('RENDER'):
        # Tell Django to copy static assets to the `staticfiles` directory
        # in your application directory on Render.
        STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

        # Turn on WhiteNoise storage backend that takes care of compressing static files
        # and creating unique names for each version so they can safely be cached forever.
        STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
else:
    # In development, use the default static files storage
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Production settings for Vercel and Render
if os.environ.get('VERCEL_REGION') or os.environ.get('RENDER'):
    # Force HTTPS
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    # Set security headers
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Simplified logging configuration for Vercel and Render
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'resume_analyzer_project': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Render-specific settings
if os.environ.get('RENDER'):
    # Get the port from the PORT environment variable
    PORT = int(os.environ.get('PORT', 8000))
    print(f"Using PORT: {PORT}")
